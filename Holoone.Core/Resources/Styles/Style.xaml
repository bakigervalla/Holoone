<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:converters="clr-namespace:Holoone.Core.Helpers.Converters"
                     xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:mdth="http://materialdesigninxaml.net/winfx/xaml/themes"
                    >

    <ResourceDictionary.MergedDictionaries>

        <!--<ResourceDictionary Source="pack://application:,,,/VBS.UI;component/Resources/Icons.xaml"></ResourceDictionary>-->
        <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.LightBlue.xaml" />-->
        <!-- Other MaterialDesign resource stuff -->
        <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignExtensions;component/Themes/Generic.xaml" />-->
        <!-- Custom Styles -->
        <!--
        <ResourceDictionary Source="pack://application:,,,/Holoone.Core;component/Resources/Styles/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Holoone.Core;component/Resources/Styles/Buttons.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Holoone.Core;component/Resources/Styles/ScrollBar.xaml"></ResourceDictionary>
        <ResourceDictionary Source="pack://application:,,,/Holoone.Core;component/Resources/Styles/ToolTip.xaml"></ResourceDictionary>-->
        
    </ResourceDictionary.MergedDictionaries>

    <converters:BooleanOrConverter x:Key="BooleanOrConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:IsHitVisibilityConverter x:Key="IsHitVisibilityConverter" />

    <DropShadowEffect x:Key="NoShadow" BlurRadius="35" ShadowDepth="13" Direction="270" 
                      Color="{StaticResource MaterialDesignShadow}" Opacity="1" RenderingBias="Performance" po:Freeze="True" />

    <Style x:Key="RootGrid" TargetType="{x:Type Grid}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{StaticResource WhiteColor}" />
    </Style>

    <Style x:Key="SideBar" TargetType="{x:Type Grid}">
        <Setter Property="Width" Value="48" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{StaticResource colorbrushBrown}" />
    </Style>

    <Style x:Key="Header" TargetType="{x:Type Grid}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Background" Value="{StaticResource WhiteColor}" />
        <Setter Property="Height" Value="60" />
        <Setter Property="Margin" Value="6" />
    </Style>

    <Style x:Key="MainContentContainer" TargetType="{x:Type ContentControl}">
        <Setter Property="Background" Value="{StaticResource WhiteColor}" />
        <Setter Property="Margin" Value="20 20 20 0" />
    </Style>

    <!-- Account Menu -->
    <Style x:Key="AccountMenu" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="Transparent" />
        <!--<Setter Property="BorderThickness" Value="0 1 0 0" />
        <Setter Property="BorderBrush" Value="#ccc" />-->
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="MainMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="Padding" Value="4" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="FontSize" Value="13px" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border CornerRadius="6" x:Name="Bd" Padding="6,0,7,0" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Uid="Border_38">
                        <Grid VerticalAlignment="Center"
                                          Background="Transparent"
                                          Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="30" SharedSizeGroup="IconGroup"/>
                                <ColumnDefinition Width="*" SharedSizeGroup="HeaderGroup"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid x:Name="IconWrapper" Visibility="Visible" Width="22">
                                <ContentPresenter x:Name="Icon"
                                                              Content="{TemplateBinding Icon}"
                                                              ContentSource="Icon"
                                                              HorizontalAlignment="Left" VerticalAlignment="Center"
                                                              Height="16" Width="16"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                            <Grid x:Name="GlyphWrapper" Visibility="Collapsed" Width="20">
                                <Viewbox x:Name="GlyphPanel"
                                                     Width="22" Height="22"
                                                     HorizontalAlignment="Left"
                                                     Margin="0" Visibility="Collapsed" VerticalAlignment="Center"
                                                     FlowDirection="LeftToRight">
                                    <Canvas Width="24" Height="24">
                                        <Path Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" 
					    		        					  x:Name="Glyph"
					    		        					  Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" />
                                    </Canvas>
                                </Viewbox>
                            </Grid>
                            <Grid Grid.Column="1">
                                <ContentPresenter x:Name="ContentPresenter"  Content="{TemplateBinding Header}" Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Uid="ContentPresenter_33"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource MaterialDesignSelection}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FF26A0DA"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Typography -->

    <!-- * Base Styles -->
    <Style TargetType="{x:Type TextBlock}" x:Key="PageTitle"
           BasedOn="{StaticResource MaterialDesignTitleTextBlock}">
        <Setter Property="Margin" Value="14 0"/>
        <Setter Property="TextDecorations" Value="Underline" />
    </Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="MaterialDesignHeadlineTextBlock">
        <Style.Resources>
            <Style TargetType="Hyperlink" BasedOn="{StaticResource MaterialDesignHeadlineHyperlink}" />
        </Style.Resources>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontWeight" Value="Regular"/>
    </Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="heading"
           BasedOn="{StaticResource MaterialDesignSubheadingTextBlock}">
        <Setter Property="FontSize" Value="16" />
    </Style>
    <Style TargetType="{x:Type TextBox}" x:Key="StandardTextBox">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="28" />
    </Style>
    
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="WaterMarkTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border Background="White" BorderBrush="#FF7D8683" BorderThickness="1"/>
                        <ScrollViewer x:Name="PART_ContentHost" Margin="5,0,0,0" VerticalAlignment="Center" />
                        <Label Margin="5,0,0,0" x:Name="WaterMarkLabel" Content="{TemplateBinding Tag}" VerticalAlignment="Center"
                               Visibility="Collapsed" Foreground="Gray" FontFamily="Arial"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}"-->

    <!-- Error Template -->
    <ControlTemplate x:Key="TextBoxErrorTemplate">
        <StackPanel Orientation="Horizontal">
            <Border BorderThickness="1" BorderBrush="#FFdc000c" CornerRadius="0.7"
                VerticalAlignment="Top">
                <Grid>
                    <Polygon x:Name="toolTipCorner"
                         Grid.ZIndex="2"
                         Margin="-1"
                         Points="6,6 6,0 0,0" 
                         Fill="#FFdc000c" 
                         HorizontalAlignment="Right" 
                         VerticalAlignment="Top"
                         IsHitTestVisible="True"/>
                    <Polyline Grid.ZIndex="3"
                          Points="7,7 0,0" Margin="-1" HorizontalAlignment="Right" 
                          StrokeThickness="1.5"
                          StrokeEndLineCap="Round"
                          StrokeStartLineCap="Round"
                          Stroke="White"
                          VerticalAlignment="Top"
                          IsHitTestVisible="True"/>
                    <AdornedElementPlaceholder x:Name="adorner"/>
                </Grid>
            </Border>
            <Border x:Name="errorBorder" Background="#FFdc000c" Margin="1,0,0,0"
                Opacity="0" CornerRadius="1.5"
                IsHitTestVisible="False"
                MinHeight="24" MaxWidth="267" Height="12">
                <Border.Effect>
                    <DropShadowEffect ShadowDepth="2.25" 
                                  Color="Black" 
                                  Opacity="0.4"
                                  Direction="315"
                                  BlurRadius="4"/>
                </Border.Effect>
                <TextBlock Text="{Binding ElementName=adorner,
                                      Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                       Foreground="White" Margin="8,3,8,3" TextWrapping="Wrap"/>
            </Border>
        </StackPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource BooleanOrConverter}">
                        <Binding ElementName="adorner" Path="AdornedElement.IsKeyboardFocused" />
                        <Binding ElementName="toolTipCorner" Path="IsMouseOver"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="fadeInStoryboard">
                        <Storyboard>
                            <DoubleAnimation Duration="00:00:00.15"
                                         Storyboard.TargetName="errorBorder"
                                         Storyboard.TargetProperty="Opacity"
                                         To="1"/>
                            <ThicknessAnimation Duration="00:00:00.15"
                                            Storyboard.TargetName="errorBorder"
                                            Storyboard.TargetProperty="Margin"
                                            FillBehavior="HoldEnd"
                                            From="1,0,0,0"
                                            To="5,0,0,0">
                                <ThicknessAnimation.EasingFunction>
                                    <BackEase EasingMode="EaseOut" Amplitude="2"/>
                                </ThicknessAnimation.EasingFunction>
                            </ThicknessAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="fadeInStoryboard"/>
                    <BeginStoryboard x:Name="fadeOutStoryBoard">
                        <Storyboard>
                            <DoubleAnimation Duration="00:00:00"
                                         Storyboard.TargetName="errorBorder"
                                         Storyboard.TargetProperty="Opacity"
                                         To="0"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- child controls styling-->
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="#f8f8f8"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Padding" Value="16 0"/>
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="stackPanelForm" TargetType="{x:Type StackPanel}">
        <Setter Property="Margin" Value="20 6 0 0" />
    </Style>
    <Style x:Key="stackPanelFormOrder" TargetType="{x:Type StackPanel}">
        <Setter Property="Margin" Value="0 6 20 0" />
    </Style>

    <!--- Categories -->
    <Style x:Key="categories" TargetType="CheckBox">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="categoriesTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="#000" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Margin" Value="-6 3" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="categoriesListBoxItem" TargetType="ListBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="Border" Padding="2" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="categoriesTreeViewItem" TargetType="TreeViewItem" BasedOn="{StaticResource MaterialDesignTreeViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Padding" Value="0" />
        <!--<Setter Property="IsExpanded" Value="True" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" To="Expanded">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ItemsHost" To="1" Duration="0:0:0.3"/>
                                            <DoubleAnimation Storyboard.TargetProperty="Scale" Storyboard.TargetName="ScaleHost" To="1" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Collapsed">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Collapsed}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ItemsHost" To="0" Duration="0:0:0.3"/>
                                            <DoubleAnimation Storyboard.TargetProperty="Scale" Storyboard.TargetName="ScaleHost" To="0" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ItemsHost" To="1" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Scale" Storyboard.TargetName="ScaleHost" To="1" Duration="0:0:0.3"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ItemsHost" To="0" Duration="0"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Scale" Storyboard.TargetName="ScaleHost" To="0" Duration="0:0:0.3"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <wpf:ScaleHost x:Name="ScaleHost" />
                        <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                      Style="{StaticResource MaterialDesignExpandCollapseToggleStyle}"
                                      Foreground="{TemplateBinding Foreground}"
                                      Margin="8 0 8 0"
                                      VerticalAlignment="Center" />

                        <Grid Grid.Column="1" Grid.ColumnSpan="2" x:Name="ContentGrid" Background="Transparent">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header"/>
                        </Grid>

                        <ContentControl Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"
                                        x:Name="AdditionalContentControl"
                                        Content="{TemplateBinding Header}"                                       
                                        Visibility="Collapsed">
                        </ContentControl>

                        <StackPanel Grid.Column="1" Grid.Row="2"
                                    x:Name="ItemsPanel"
                                    Margin="-16 0 0 0"
                                    Grid.ColumnSpan="2">
                            <StackPanel.Height>
                                <MultiBinding Converter="{StaticResource MathMlpMultipleConverter}">
                                    <Binding ElementName="ItemsHost" Path="ActualHeight"/>
                                    <Binding ElementName="ScaleHost" Path="Scale"/>
                                </MultiBinding>
                            </StackPanel.Height>
                            <ItemsPresenter x:Name="ItemsHost"
                                            VerticalAlignment="Top"
                                            Opacity="0"
                                            Visibility="Collapsed"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Visible"/>
                            <!-- Hide Tree if it is empty
                            <Setter Property="Visibility" TargetName="Expander" Value="Visible"/>
                            -->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeHeaderCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="#000" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Margin" Value="-6 3" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <ContentPresenter VerticalAlignment="Stretch" HorizontalAlignment="Stretch" RecognizesAccessKey="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Paging -->
    <Style x:Key="paggingButtons" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="#efefef" />
        <Setter Property="Padding" Value="6 2 6 2" />
        <Setter Property="Margin" Value="2 0 2 0" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="FontFamily" Value="Verdana" />
    </Style>
    <Style x:Key="productNavigateButtons" TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="6 0 6 0" />
        <Setter Property="BorderBrush" Value="#acacac" />
        <Setter Property="Background" Value="#efefef" />
        <Setter Property="Foreground" Value="#444444" />
        <Setter Property="Margin" Value="2 0" />
    </Style>
    <ControlTemplate x:Key="buttonPageNumbers" TargetType="{x:Type Button}">
        <Grid Margin="2 0">
            <Ellipse Name="el1" Fill="{TemplateBinding Background}" Width="20" Height="20" Stroke="#acacac" />
            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" Content="{TemplateBinding Button.Content}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsMouseOver" Value="True">
                <Setter TargetName="el1" Property="Fill" Value="#bee6fd" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Sidebars -->
    <Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MaterialDesignCircularProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource PrimaryBlueColor}"/>
    </Style>


    <!-- DataGrid Cell Style (RightAlign) -->
    <Style x:Key="PriceStyle" TargetType="DataGridCell">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Margin" Value="0 0 20 0" />
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <SolidColorBrush Color="Transparent"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="Transparent"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DataGrid Column Header Style (RightAlign) -->
    <Style x:Key="PriceHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Margin" Value="0 0 10 0" />
        <Setter Property="Background" Value="#f8f8f8"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Padding" Value="16 0"/>
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <!-- DataGrid Cell Style (RightAlign) -->
    <Style x:Key="PriceStyleWider" TargetType="DataGridCell">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Margin" Value="0 0 50 0" />
        <Style.Triggers>
            <Trigger Property="DataGridCell.IsSelected" Value="True">
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <SolidColorBrush Color="Transparent"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="Transparent"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DataGrid Column Header Style (RightAlign) -->
    <Style x:Key="PriceHeaderStyleWider" TargetType="DataGridColumnHeader">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Margin" Value="0 0 40 0" />
        <Setter Property="Background" Value="#f8f8f8"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Padding" Value="16 0"/>
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <!-- Watermark TextBox Style -->
    <Style x:Key="WaterMarkStyle" TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border Background="White" BorderBrush="#FF7D8683" BorderThickness="1"/>
                        <ScrollViewer x:Name="PART_ContentHost" Margin="5,0,0,0" VerticalAlignment="Center" />
                        <Label Margin="5,0,0,0" x:Name="WaterMarkLabel" Content="{TemplateBinding Tag}" VerticalAlignment="Center" Visibility="Collapsed" Foreground="Gray" FontFamily="Arial"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Radio Button as Button -->
    <Style TargetType="{x:Type RadioButton}" x:Key="buttonstripe1">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Cursor="Hand">
                        <!--Text element-->
                        <Border Width="60" Height="20" CornerRadius="3" BorderBrush="#FFE2E2E2" BorderThickness="1">
                            <Grid>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                <!--We don't need any bullet, cause our border is the switching element-->
                                <!--<Border Margin="5,0,48,0" Background="#FFCDCDCD" CornerRadius="1" Name="RadioMark" />-->
                                <!-- To change the apearance to button stripe 2, edit the margins! -->
                            </Grid>

                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="White" Offset="0" />
                                    <GradientStop Color="#FFE2E2E2" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                    </BulletDecorator>

                    <!--If item is checked, trigger the visibility of the mark-->
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="RadioMark" Property="Background" Value="Gold"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlowDocumentStyle" TargetType="{x:Type FlowDocumentScrollViewer}">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>
    <Style TargetType="Paragraph">
        <Setter Property="FontFamily" Value="Microsoft Sans Serif" />
    </Style>

    <Style TargetType="WebBrowser">
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
    </Style>



    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBoxBase}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryBlueColor}" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="28" />
    </Style>
    <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MaterialDesignPasswordBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryBlueColor}" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="28" />
    </Style>
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignComboBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryBlueColor}" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Padding" Value="8 2 8 2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="28" />
    </Style>
    
    
    <Style x:Key="GearButton" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Margin" Value="12,0" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="validationTemplate">
        <DockPanel>
            <!--specify where the decorated control is placed relative to the other elements in the template-->
            <TextBlock Foreground="Red" FontSize="20" Text="*" VerticalAlignment="Top" />
            <AdornedElementPlaceholder />
        </DockPanel>
    </ControlTemplate>

    <!--set the error template for all textboxes
            bind the value of the tooltip to the first error in the errors collection
            ValidatesOnDataErrors uses IDataErrorInfo in the viewmodel to determine if the input is valid.-->
    <Style TargetType="TextBox" x:Key="validationTextBox" BasedOn="{StaticResource DefaultTextBox}">
        <!--VerticalContentAlignment is set here as the DefaultTextBox style in MainSkin is overriden.
                An alternative would be to add BasedOn="{StaticResource DefaultTextBox}" to the style, but this will
                display an error in Visual Studio. As MainSkin is added in BeeDockPane on runtime, Visual Studio
                does not know that MainSkin is available in this element.-->
        <Setter Property="VerticalContentAlignment"  Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource validationTemplate}" />
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>